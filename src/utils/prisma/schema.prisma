generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String  @id @default(uuid(7)) @db.Uuid
    email        String  @unique
    username     String  @unique
    name         String?
    image        String?
    admin        Boolean @default(false)
    verified     Boolean @default(false)
    password     String
    age          Int?
    phoneNumber  String? @unique @map("phone_number")
    refreshToken String? @map("refresh_token")

    follower  Follow[] @relation("follower")
    following Follow[] @relation("following")

    blockedBy BlockedUser[] @relation("blocked")
    blocked   BlockedUser[] @relation("blocker")

    messageSent     Message[] @relation("sender")
    messageReceived Message[] @relation("receiver")

    community Community[]

    bannedBy   BannedUser[] @relation("bannedBy")
    bannedUser BannedUser[]

    post    Post[]
    comment Comment[]

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp
    member    Member[]
    vote      Vote[]

    @@map("user")
}

model Follow {
    id     String       @id @default(uuid(7)) @db.Uuid
    status FollowStatus @default(PENDING)

    followerId  String @map("follower_id")
    followingId String @map("following_id")
    follower    User   @relation("follower", fields: [followerId], references: [id])
    following   User   @relation("following", fields: [followingId], references: [id])

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp

    @@map("follow")
}

model BlockedUser {
    id String @id @default(uuid(7)) @db.Uuid

    blockerId String @map("blocker_id")
    blockedId String @map("blocked_id")
    blocker   User   @relation("blocker", fields: [blockerId], references: [id])
    blocked   User   @relation("blocked", fields: [blockedId], references: [id])

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

    @@map("blocked_user")
}

model Message {
    id      String  @id @default(uuid(7)) @db.Uuid
    content String
    seen    Boolean @default(false)

    senderId   String @map("sender_id")
    receiverId String @map("receiver_id")
    sender     User   @relation("sender", fields: [senderId], references: [id])
    receiver   User   @relation("receiver", fields: [receiverId], references: [id])

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp

    @@map("message")
}

model Member {
    id     String        @id @default(uuid(7)) @db.Uuid
    status MemberStatus  @default(PENDING)
    role   CommunityRole @default(MEMBER)

    communityId String    @map("community_id")
    userId      String    @map("user_id")
    community   Community @relation(fields: [communityId], references: [id])
    user        User      @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp

    @@map("member")
}

model BannedUser {
    id          String @id @default(uuid(7)) @db.Uuid
    reason      String
    bannedById  String @map("banned_by_id")
    userId      String @map("user_id")
    communityId String @map("community_id")

    bannedBy  User      @relation("bannedBy", fields: [bannedById], references: [id])
    user      User      @relation(fields: [userId], references: [id])
    community Community @relation(fields: [communityId], references: [id])

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp

    @@map("banned_users")
}

model Community {
    id          String        @id @default(uuid(7)) @db.Uuid
    name        String
    banner      String?
    icon        String?
    description String?
    type        CommunityType
    mature      Boolean

    topicsId String @map("topics_id")
    topics   Topics @relation(fields: [topicsId], references: [id])

    userId     String       @map("user_id")
    user       User         @relation(fields: [userId], references: [id])
    member     Member[]
    bannedUser BannedUser[]
    post       Post[]

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp
}

model Topics {
    id   String @id @default(uuid(7)) @db.Uuid
    name String
    icon String

    communities Community[]

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp

    @@map("topics")
}

model Post {
    id          String   @id @default(uuid(7)) @db.Uuid
    media       String[]
    title       String
    description String
    tags        String[]

    userId      String @map("user_id")
    communityId String @map("community_id")

    user      User      @relation(fields: [userId], references: [id])
    community Community @relation(fields: [communityId], references: [id])

    comment Comment[]
    vote    Vote[]

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp

    @@map("post")
}

model Comment {
    id      String @id @default(uuid(7)) @db.Uuid
    content String

    subComment Comment[] @relation("comment")
    vote       Vote[]

    parentId  String?  @map("parent_id")
    postId    String   @map("post_id")
    userId    String   @map("user_id")
    parent    Comment? @relation("comment", fields: [parentId], references: [id])
    post      Post     @relation(fields: [postId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp

    @@map("comment")
}

model Vote {
    id        String   @id @default(uuid(7)) @db.Uuid
    type      VoteType
    userId    String   @map("user_id")
    postId    String?  @map("post_id")
    commentId String?  @map("comment_id")

    user    User     @relation(fields: [userId], references: [id])
    post    Post?    @relation(fields: [postId], references: [id])
    comment Comment? @relation(fields: [commentId], references: [id])

    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp

    @@map("vote")
}

enum FollowStatus {
    PENDING
    ACCEPTED
}

enum CommunityType {
    PUBLIC
    PRIVATE
}

enum MemberStatus {
    PENDING
    ACCEPTED
}

enum CommunityRole {
    OWNER
    MODERATOR
    MEMBER
}

enum VoteType {
    UPVOTE
    DOWNVOTE
}
